package bmaso.file_ingest_service_poc.protocol

import cats.data.NonEmptyList
import akka.actor.typed.ActorRef
import java.time.Instant

import bmaso.akka.JsonSerialization

/**
 * Describes Akka messages consumed or generated a file ingestion entity. Orders are messages from
 * external actors to the entity; notifications are messages generated by the entity and sent to
 * external actors involed in transactions with the actor.
 **/
object FileIngestion {
  sealed trait Message extends JsonSerialization

  /**
   * The subtype of this sealed trait comprise all of the events produced by the file ingestion
   **/
  trait Notification extends Message
  case class IngestFileOrderAcknowledgement(cycleId: String, dataFile: String, order: IngestFileOrder) extends Notification
  case class IngestFileOrderRejected(cycleId: String, dataFile: String, problems: NonEmptyList[String])
    extends Notification
  case class CurrentState(state: State) extends Notification

  trait Order extends Message
  /** Order to ingest a data file */
  case class IngestFileOrder(
    cycleId: String,
    userId: String,
    host: String,
    dbInfo: IngestFileOrder.DBInfo,
    fileInfo: IngestFileOrder.FileInfo
  ) extends Order
  case class IngestFileOrderWithNotification(
    order: IngestFileOrder,
    notificationActor: ActorRef[FileIngestion.Notification]
  ) extends Order
  object IngestFileOrder {
    case class DBInfo(targetDatabase: String, targetSchema: String, targetTable: String)
    case class FileInfo(dataFile: String, delimiter: String, columns: List[ColumnInfo])
    case class ColumnInfo(columnName: String, protegrityDataType: String)
  }
  /** Order to receive notification that the external cleanse process has completed successfully */
  case class CleanseCompleteAcknowledgementOrder(cleansedDataFile: String) extends Order
  /** Order to receive notification that the external file upload process has completed successfully */
  case class UploadCompleteAcknowledgementOrder() extends Order
  /** Order to receive notification that an unrecoverable problem occurred with an asynchronous process (cleanse or upload) */
  case class ProblemsAcknowledgementOrder(problems: NonEmptyList[String]) extends Order

  case class FileIngestStateRetrieveOrder(replyTo: ActorRef[CurrentState])
    extends Order

  sealed trait State extends JsonSerialization {
    def cycleId: String
    def dataFile: String
    def timeEnteredState: Instant
  }
  case object EmptyState extends State {
    override val cycleId = null
    override val dataFile = null
    override val timeEnteredState = null
  }
  case class Enqueued(override val cycleId: String, override val dataFile: String, timeEnteredState: Instant)
    extends State
  case class Cleansing(override val cycleId: String, override val dataFile: String, timeEnteredState: Instant)
    extends State
  case class Uploading(override val cycleId: String, override val dataFile: String, timeEnteredState: Instant)
    extends State
  case class Complete(override val cycleId: String, override val dataFile: String, timeEnteredState: Instant,
                      problems_? : Option[NonEmptyList[String]])
    extends State
}
